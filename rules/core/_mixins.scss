/*
* Mixins
* These are the core mixins 
*
*/

@mixin absolute($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}

// -- -- Both Axes centered
@mixin centerXY() {
  @include absolute(-9999rem, -9999rem, -9999rem, -9999rem);
  margin: auto;
}
// -- -- X-axis centered
@mixin centerX() {
  position: absolute;
  left: -9999em;
  right: -9999em;
  margin: auto;
}
// -- -- Y-axis centered
@mixin centerY() {
  position: absolute;
  top: -9999em;
  bottom: -9999em;
  margin: auto;
}

// --  Cover the inside of a relative element
@mixin cover() {
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  position: absolute;
}

// -- Cover the inside of a relative element and choose the background
@mixin dim($background : $dim) {
  @include cover();
  background: $background;
}

// -- Set border radius, and avoid fragments and color leakage
@mixin corners($radius) {
  border-radius: $radius;
  background-clip: padding-box; /* stops bg color from leaking outside the border: */
}

// Truncate text
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Creates a gradient
// @include gradient((0% : rgba(0,0,0,1), 100% : rgba(150,150,150, .5)));
@mixin gradient($stops, $horizontal : false) {
  $gradient: 'linear-gradient(';

  @if ($horizontal) {
    $gradient: 'linear-gradient(to right,';
  }

  $props: '';

  $total: 0;

  @each $increment in $stops {
    $total: $total + 1;
  }

  $iterations: 0;
  @each $percent, $color in $stops {
    $props: $props + $color + ' ' + $percent;
    $iterations: $iterations + 1;

    @if ($iterations != $total) {
      $props: $props + ',';
    }
  }

  $gradient: $gradient + $props + ')';
  background: unquote($gradient);
}

// Limit amount of lines (default appends ellipsis if overflowing)
@mixin limit-lines($lines, $line-height : 1em, $ellipsis : true) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;
  line-height: $line-height;
  max-height: $line-height * $lines;
}

@mixin line-height($heightValue: 12 ) {
  line-height: $heightValue + px; //fallback for old browsers
  line-height: (0.125 * $heightValue) + rem;
}

@mixin hide() {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

@mixin text-inset($color, $opacity : 0.7) {
  @if lightness($color) < 50% {
    text-shadow: 1px 1px 1px rgba(#fff, $opacity);
  } @else {
    text-shadow: -1px -1px 1px rgba(#000, $opacity);
  }
  color: $color;
}
